name: Deploy to EC2

on:
  push:
    branches:
      - master

jobs:
  cleanup:
    runs-on: ubuntu-latest

    steps:
      - name: Connect to EC2 via SSH for Cleanup
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            echo "Connected to EC2 for setup"

            # Check if Docker is already installed
            if ! command -v docker &> /dev/null; then
              echo "Docker not found. Installing..."
              sudo yum update -y
              sudo yum install -y docker
              sudo service docker start
              sudo usermod -a -G docker ec2-user
            else
              echo "Docker is already installed. Version: $(docker --version)"
            fi

            # Check if Docker Compose is installed
            if ! command -v docker-compose &> /dev/null; then
              echo "Docker Compose not found. Installing..."
              sudo curl -L "https://github.com/docker/compose/releases/download/2.22.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
              sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose
              echo "Docker Compose installed. Version: $(docker-compose --version)"
            else
              echo "Docker Compose is already installed. Version: $(docker-compose --version)"
            fi

            echo "Environment setup completed"

  clone_repo:
    runs-on: ubuntu-latest
    needs: cleanup

    steps:
      - name: Connect to EC2 via SSH to Clone Repo
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            echo "Connected to EC2 for setup"

            # Install Git if not already installed
            if ! command -v git &> /dev/null
            then
                echo "Git not found. Installing..."
                sudo yum install -y git  # Use `sudo apt-get install -y git` for Ubuntu
            fi

            # Ensure the repository directory exists, clone if not
            if [ ! -d "mundo-camiones-auth-service" ]; then
              echo "Directory does not exist. Cloning repository..."
              # Use the GitHub SSH key to pull the latest code
              echo "${{ secrets.TMS_GITHUB_SSHKEY }}" > ~/.ssh/tmsa_github_id_rsa
              chmod 600 ~/.ssh/tmsa_github_id_rsa
              eval $(ssh-agent)
              ssh-add ~/.ssh/tmsa_github_id_rsa
              git clone git@github.com:exagonsoft/mundo-camiones-auth-service.git
            else
              echo "Directory exists. No need to clone."
            fi

            # Navigate to the repository directory
            cd mundo-camiones-auth-service

            # Use the GitHub SSH key to pull the latest code
            echo "${{ secrets.TMS_GITHUB_SSHKEY }}" > ~/.ssh/tmsa_github_id_rsa
            chmod 600 ~/.ssh/tmsa_github_id_rsa
            eval $(ssh-agent)
            ssh-add ~/.ssh/tmsa_github_id_rsa

            git fetch origin master
            git reset --hard origin/master
            echo "GitHub Repo Updated"

            rm ~/.ssh/tmsa_github_id_rsa
            echo "Setup completed"

  deploy:
    runs-on: ubuntu-latest
    needs: clone_repo

    steps:
      - name: Connect to EC2 via SSH to Deploy with Docker
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            echo "Connected to EC2 for deployment"

            echo "Installing required libraries..."
            sudo yum update -y
            sudo yum install -y libxcrypt-compat

            # Navigate to the repository directory
            cd mundo-camiones-auth-service

            # Create or update the .env file
            rm .env
            echo "MONGO_URI=${{ vars.MONGO_URI }}" >> .env
            echo "JWT_SECRET=${{ vars.JWT_SECRET }}" >> .env
            echo "APP_PORT=${{ vars.APP_PORT }}" >> .env

            echo "Env file Created"

            # Build and start the Docker container
            docker-compose down
            docker-compose build
            docker-compose up -d

            echo "Application deployed using Docker successfully"

